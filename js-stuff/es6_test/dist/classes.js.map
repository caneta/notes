{"version":3,"sources":["src/classes.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAAqB,OAAO;UAAP,OAAO;wBAAP,OAAO;;;cAAP,OAAO;;SAKZ,oBAAG;;;;;OAIX,KAAK;AACC,aADN,KAAK,CACE,CAAC,EAAE,CAAC,EAAE;2BADb,KAAK;;AAET,SAAI,CAAC,CAAC,GAAG,CAAC,CAAA;AACT,SAAI,CAAC,CAAC,GAAG,CAAC,CAAA;KACX;;iBAJI,KAAK;;YAKF,oBAAG;AACV,mBAAW,IAAI,CAAC,CAAC,UAAK,IAAI,CAAC,CAAC,OAAG;MAC/B;;;WAPI,KAAK;;;AAUX,OAAI,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;AACvB,UAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;;;;OAGnB,UAAU;cAAV,UAAU;;AACJ,aADN,UAAU,CACH,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE;2BADpB,UAAU;;AAEd,gCAFI,UAAU,6CAER,CAAC,EAAE,CAAC,EAAC;AACV,SAAI,CAAC,KAAK,GAAG,KAAK,CAAA;KACnB;;iBAJI,UAAU;;YAKP,oBAAG;AACV,wCANI,UAAU,qDAMmB,IAAI,CAAC,KAAK,CAAE;MAC7C;;;WAPI,UAAU;MAAS,KAAK;;AAU/B,OAAI,EAAE,GAAG,IAAI,UAAU,CAAC,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;AACtC,UAAO,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAA;AAC1B,UAAO,CAAC,GAAG,CAAC,EAAE,YAAY,UAAU,CAAC,CAAA;AACrC,UAAO,CAAC,GAAG,CAAC,EAAE,YAAY,KAAK,CAAC,CAAA;;;;;;;;;;;;;;;;AAgBhC,OAAM,OAAO;aAAS,EAAE;2BAAF,EAAE;;;iBAAF,EAAE;;YACX,wBAAG;AACd,aAAO,EAAE,CAAC,IAAI,CAAA;MACd;;;WAHoB,EAAE;OAIvB,CAAA;AACF,OAAI,IAAI,GAAG,IAAI,OAAO,EAAE,CAAA;AACvB,UAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAA;;;;OAI1B,GAAG;AACG,aADN,GAAG,CACI,IAAI,EAAE;2BADb,GAAG;;AAEP,SAAI,CAAC,IAAI,GAAG,IAAI,CAAA;KAChB;;iBAHI,GAAG;;YAOO,2BAAG;AACjB,aAAO,cAAc,CAAA;MACrB;;;YALkB,wBAAG;AACrB,aAAO,QAAQ,CAAA;MACf;;;WANI,GAAG;;;AAWV,OAAI,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;AACvB,UAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;AACpB,UAAO,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAA;AAC/B,UAAO,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAA;;;;;;OAK5B,MAAM;aAAN,MAAM;2BAAN,MAAM;;;iBAAN,MAAM;;UACH,eAAO;AAAE,aAAO,IAAI,CAAC,SAAS,CAAA;MAAE;UAChC,aAAC,IAAI,EAAE;AAAE,UAAI,CAAC,SAAS,GAAG,IAAI,CAAA;MAAE;;;WAFnC,MAAM;;;AAKb,OAAI,MAAM,GAAG,IAAI,MAAM,EAAE,CAAA;AACxB,SAAM,CAAC,IAAI,GAAG,KAAK,CAAA;AACnB,UAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;GACzB;;;OAxFe,eAAG;AAClB,UAAO,SAAS,CAAA;GAChB;;;QAHmB,OAAO;;;qBAAP,OAAO","file":"src/classes.js","sourcesContent":["export default class Classes {\n\tstatic get title() {\n\t\treturn 'Classes'\n\t}\n\n\tstatic examples() {\n\t\t// Base class minimal example\n\t\t// A class body can only contain methods,\n\t\t// but not data properties!\n\t\tclass Point {\n\t\t\tconstructor(x, y) {\n\t\t\t\tthis.x = x\n\t\t\t\t\tthis.y = y\n\t\t\t}\n\t\t\ttoString() {\n\t\t\t\treturn `(${this.x}, ${this.y})`\n\t\t\t}\n\t\t}\n\n\t\tvar p = new Point(25, 8)\n\t\t\tconsole.log(p.toString())\n\n\t\t\t// Inheritance minimal example\n\t\t\tclass ColorPoint extends Point {\n\t\t\t\tconstructor(x, y, color) {\n\t\t\t\t\tsuper(x, y)\n\t\t\t\t\t\tthis.color = color\n\t\t\t\t}\n\t\t\t\ttoString() {\n\t\t\t\t\treturn `${super.toString()} in ${this.color}`\n\t\t\t\t}\n\t\t\t}\n\n\t\tlet cp = new ColorPoint(25, 8, 'green')\n\t\t\tconsole.log(cp.toString()) // '(25, 8) in green'\n\t\t\tconsole.log(cp instanceof ColorPoint) // true\n\t\t\tconsole.log(cp instanceof Point) // true\n\n\t\t\t// ReferenceError, because classes are\n\t\t\t// not hoisted unlike functions:\n\t\t\t//\n\t\t\t// new Foo()\n\t\t\t// class Foo {} // ReferenceError\n\t\t\t//\n\t\t\t// ...but the following is corrct:\n\t\t\t//\n\t\t\t// function functionThatUsesBar() { new Bar(); }\n\t\t\t// class Bar {}\n\t\t\t// functionThatUsesBar(); // OK\n\n\t\t\t// Class expression: identifier visible only\n\t\t\t// within the expression\n\t\t\tconst MyClass = class Me {\n\t\t\t\tgetClassName() {\n\t\t\t\t\treturn Me.name\n\t\t\t\t}\n\t\t\t}\n\t\tlet inst = new MyClass()\n\t\t\tconsole.log(inst.getClassName()) // Me\n\t\t\t// console.log(Me.name) // ReferenceError: Me is not defined\n\n\t\t\t// Three kinds of methods:\n\t\t\tclass Foo {\n\t\t\t\tconstructor(prop) {\n\t\t\t\t\tthis.prop = prop\n\t\t\t\t}\n\t\t\t\tstatic staticMethod() {\n\t\t\t\t\treturn 'classy'\n\t\t\t\t}\n\t\t\t\tprototypeMethod() {\n\t\t\t\t\treturn 'prototypical'\n\t\t\t\t}\n\t\t\t}\n\t\tlet foo = new Foo(123);\n\t\tconsole.log(foo.prop)\n\t\t\tconsole.log(Foo.staticMethod())\n\t\t\tconsole.log(foo.prototypeMethod())\n\n\t\t\t// Getter and setter methods:\n\t\t\t// methods names and object properties must be different\n\t\t\t// to avoid circular dependencies\n\t\t\tclass Person {\n\t\t\t\tget name()     { return this.firstName }\n\t\t\t\tset name(name) { this.firstName = name }\n\t\t\t}\n\n\t\tlet person = new Person()\n\t\t\tperson.name = 'Tom'\n\t\t\tconsole.log(person.name) // Tom\n\t}\n}\n"]}