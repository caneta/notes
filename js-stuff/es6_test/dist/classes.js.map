{"version":3,"sources":["src/classes.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAAqB,OAAO;WAAP,OAAO;0BAAP,OAAO;;;eAAP,OAAO;;WAKX,oBAAG;;;;;UAIV,KAAK;AACE,iBADP,KAAK,CACG,CAAC,EAAE,CAAC,EAAE;gCADd,KAAK;;AAEP,cAAI,CAAC,CAAC,GAAG,CAAC,CAAA;AACR,cAAI,CAAC,CAAC,GAAG,CAAC,CAAA;SACb;;qBAJG,KAAK;;iBAKD,oBAAG;AACT,yBAAW,IAAI,CAAC,CAAC,UAAK,IAAI,CAAC,CAAC,OAAG;WAChC;;;eAPG,KAAK;;;AAUX,UAAI,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;AACtB,aAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;;;;UAGnB,UAAU;kBAAV,UAAU;;AACH,iBADP,UAAU,CACF,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE;gCADrB,UAAU;;AAEZ,qCAFE,UAAU,6CAEN,CAAC,EAAE,CAAC,EAAC;AACT,cAAI,CAAC,KAAK,GAAG,KAAK,CAAA;SACrB;;qBAJG,UAAU;;iBAKN,oBAAG;AACT,8CANE,UAAU,qDAMqB,IAAI,CAAC,KAAK,CAAE;WAC9C;;;eAPG,UAAU;SAAS,KAAK;;AAUhC,UAAI,EAAE,GAAG,IAAI,UAAU,CAAC,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;AACrC,aAAO,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAA;AAC1B,aAAO,CAAC,GAAG,CAAC,EAAE,YAAY,UAAU,CAAC,CAAA;AACrC,aAAO,CAAC,GAAG,CAAC,EAAE,YAAY,KAAK,CAAC,CAAA;;;;;;;;;;;;;;;;AAgBhC,UAAM,OAAO;iBAAS,EAAE;gCAAF,EAAE;;;qBAAF,EAAE;;iBACV,wBAAG;AACb,mBAAO,EAAE,CAAC,IAAI,CAAA;WACf;;;eAHmB,EAAE;UAIvB,CAAA;AACH,UAAI,IAAI,GAAG,IAAI,OAAO,EAAE,CAAA;AACtB,aAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAA;;;;UAI1B,GAAG;AACI,iBADP,GAAG,CACK,IAAI,EAAE;gCADd,GAAG;;AAEL,cAAI,CAAC,IAAI,GAAG,IAAI,CAAA;SACjB;;qBAHG,GAAG;;iBAOQ,2BAAG;AAChB,mBAAO,cAAc,CAAA;WACtB;;;iBALkB,wBAAG;AACpB,mBAAO,QAAQ,CAAA;WAChB;;;eANG,GAAG;;;AAWX,UAAI,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;AACvB,aAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;AACnB,aAAO,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAA;AAC/B,aAAO,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAA;;;;;;UAK5B,MAAM;iBAAN,MAAM;gCAAN,MAAM;;;qBAAN,MAAM;;eACF,eAAO;AAAE,mBAAO,IAAI,CAAC,SAAS,CAAA;WAAE;eAChC,aAAC,IAAI,EAAE;AAAE,gBAAI,CAAC,SAAS,GAAG,IAAI,CAAA;WAAE;;;eAFpC,MAAM;;;AAKd,UAAI,MAAM,GAAG,IAAI,MAAM,EAAE,CAAA;AACvB,YAAM,CAAC,IAAI,GAAG,KAAK,CAAA;AACnB,aAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;KAC3B;;;SAxFe,eAAG;AACjB,aAAO,SAAS,CAAA;KACjB;;;SAHkB,OAAO;;;qBAAP,OAAO","file":"src/classes.js","sourcesContent":["export default class Classes {\n  static get title() {\n    return 'Classes'\n  }\n\n  static examples() {\n    // Base class minimal example\n    // A class body can only contain methods,\n    // but not data properties!\n    class Point {\n      constructor(x, y) {\n        this.x = x\n          this.y = y\n      }\n      toString() {\n        return `(${this.x}, ${this.y})`\n      }\n    }\n\n    var p = new Point(25, 8)\n      console.log(p.toString())\n\n      // Inheritance minimal example\n      class ColorPoint extends Point {\n        constructor(x, y, color) {\n          super(x, y)\n            this.color = color\n        }\n        toString() {\n          return `${super.toString()} in ${this.color}`\n        }\n      }\n\n    let cp = new ColorPoint(25, 8, 'green')\n      console.log(cp.toString()) // '(25, 8) in green'\n      console.log(cp instanceof ColorPoint) // true\n      console.log(cp instanceof Point) // true\n\n      // ReferenceError, because classes are\n      // not hoisted unlike functions:\n      //\n      // new Foo()\n      // class Foo {} // ReferenceError\n      //\n      // ...but the following is corrct:\n      //\n      // function functionThatUsesBar() { new Bar(); }\n      // class Bar {}\n      // functionThatUsesBar(); // OK\n\n      // Class expression: identifier visible only\n      // within the expression\n      const MyClass = class Me {\n        getClassName() {\n          return Me.name\n        }\n      }\n    let inst = new MyClass()\n      console.log(inst.getClassName()) // Me\n      // console.log(Me.name) // ReferenceError: Me is not defined\n\n      // Three kinds of methods:\n      class Foo {\n        constructor(prop) {\n          this.prop = prop\n        }\n        static staticMethod() {\n          return 'classy'\n        }\n        prototypeMethod() {\n          return 'prototypical'\n        }\n      }\n    let foo = new Foo(123);\n    console.log(foo.prop)\n      console.log(Foo.staticMethod())\n      console.log(foo.prototypeMethod())\n\n      // Getter and setter methods:\n      // methods names and object properties must be different\n      // to avoid circular dependencies\n      class Person {\n        get name()     { return this.firstName }\n        set name(name) { this.firstName = name }\n      }\n\n    let person = new Person()\n      person.name = 'Tom'\n      console.log(person.name) // Tom\n  }\n}\n"]}