{"version":3,"sources":["src/app.js"],"names":[],"mappings":";;AAAA,SAAS,iBAAiB,CAAC,KAAK,EAAC;AAChC,SAAO,CAAC,IAAI,2CAET,KAAK,uCAEP,CAAA;CACD;;;;;;;;AAQD,iBAAiB,CAAC,YAAY,CAAC,CAAA;;;AAG/B,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAC7B,IAAI,GAAI,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC;SAAI,CAAC,GAAG,CAAC;CAAA,CAAC;IAC7B,IAAI,GAAI,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC;SAAK,CAAC,GAAG,CAAC;CAAA,CAAC;IAClC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC;SAAK,EAAC,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAC;CAAC,CAAC,CAAA;;;AAGjD,IAAI,KAAK,GAAG,EAAE,CAAA;AACd,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AAChB,MAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EACb,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB,CAAC,CAAC;;;AAGH,OAAO,CAAC,GAAG,eACF,KAAK,iBACN,IAAI,gBACJ,IAAI,iBACH,KAAK,QACZ,CAAA;;;AAGF,IAAI,GAAG,GAAG;AACR,OAAK,EAAE,KAAK;AACZ,UAAQ,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;AACjC,cAAY,EAAA,wBAAG;;;AACb,QAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;aACrB,OAAO,CAAC,GAAG,CAAI,MAAK,KAAK,eAAU,CAAC,CAAG;KAAA,CAAC,CAAA;GAC3C;CACF,CAAA;;AAED,GAAG,CAAC,YAAY,EAAE,CAAA;;AAElB,iBAAiB,CAAC,wBAAwB,CAAC,CAAA;;;AAG3C,SAAS,CAAC,GAAG;AACX;AACE,QAAI,CAAC,GAAG,QAAQ,CAAA;AAClB,WAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;AACZ;AACD,aAAO,CAAC,GAAG,CAAC,EAAC,CAAC,CAAA;;AAEX,UAAM,EAAC,GAAG,QAAQ,CAAA;AAClB,UAAM,CAAC,GAAG,QAAQ,CAAA;AACrB,aAAO,CAAC,GAAG,CAAC,EAAC,CAAC,CAAA;KAGZ;;;;;GAKF;CACF;;AAED,CAAC,EAAE,CAAA","file":"src/app.js","sourcesContent":["function printSectionTitle(title){\n\tconsole.info(`\n# -----------------------------\n# ${title}\n# -----------------------------`\n\t)\n}\n\n// function printSeparator(){\n// \tconsole.log(`\n// - - - - - - - - - - - - - - - -`\n// \t)\n// }\n\nprintSectionTitle('Fat Arrows')\n\n// Expression bodies\nvar evens = [0, 2, 4, 6, 8, 10],\n\t\todds  = evens.map(v => v + 1),\n\t\tnums  = evens.map((v, i) => v + i),\n\t\tpairs = evens.map(v => ({even: v, odd: v + 1}))\n\n// Statement bodies\nvar fives = []\nnums.forEach(v => {\n  if (v % 5 === 0)\n    fives.push(v);\n});\n\n// Multiline strings and string interpolation\nconsole.log(`\nevens: ${evens} \nodds: ${odds}\nnums: ${nums}\nfives: ${fives}\n`)\n\n// Lexical this\nvar bob = {\n  _name: \"Bob\",\n  _friends: [\"Anne\", \"Tim\", \"Jack\"],\n  printFriends() {\n    this._friends.forEach(f =>\n      console.log(`${this._name} knows ${f}`))\n  }\n}\n\nbob.printFriends()\n\nprintSectionTitle('let and const keywords')\n\n// Variables declared with let have Block Scope, while variables declared with var have Function Scope\nfunction f() {\n  {\n    let x = \"lalala\"\n\t\tconsole.log(x) // lalala\n    {\n\t\t\tconsole.log(x)\n      // okay, block scoped name\n      const x = \"sneaky\"\n      const y = \"cucucu\"\n\t\t\tconsole.log(x)\n      // error, const\n      // x = \"foo\"\n    }\n    // error, already declared in block\n    // let x = \"inner\"\n    // error, y is declared inside an inner block\n\t\t// console.log(y)\n  }\n}\n\nf()\n\n// class Point {\n// \tconstructor(x, y) {\n// \t\tthis.x = x\n// \t\tthis.y = y\n// \t}\n// \ttoString() {\n// \t\treturn `(${this.x}, ${this.y})`\n// \t\t// return '(' + this.x + ', ' + this.y + ')';\n// \t}\n// }\n\n// class ColorPoint extends Point {\n// \tconstructor(x, y, color) {\n// \t\tsuper(x, y)\n// \t\tthis.color = color\n// \t}\n// \ttoString() {\n// \t\t// return super.toString() + ' in ' + this.color;\n// \t\treturn `${super.toString()} in ${this.color}`\n// \t}\n// }\n"]}