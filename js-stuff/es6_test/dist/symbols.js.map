{"version":3,"sources":["src/symbols.js"],"names":[],"mappings":";;;;;;;;;;;;IAAqB,OAAO;WAAP,OAAO;0BAAP,OAAO;;;eAAP,OAAO;;WAKX,oBAAG;;;;AAEhB,UAAI,OAAO,GAAG,MAAM,EAAE,CAAA;AACtB,aAAO,CAAC,GAAG,CAAC,OAAO,OAAO,CAAC,CAAA;AAC3B,UAAI,OAAO,GAAG,MAAM,CAAC,gCAAgC,CAAC,CAAA;AACtD,aAAO,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAA;AAC/B,aAAO,CAAC,GAAG,CAAC,OAAO,KAAK,OAAO,CAAC,CAAA;;;AAGhC,UAAM,MAAM,GAAG,MAAM,EAAE,CAAA;AACvB,UAAM,GAAG,GAAM,MAAM,EAAE,CAAA;;AAEvB,UAAI,IAAI,uCACH,MAAM,EAAG,GAAG,0BACZ,GAAG,EAAC,YAAG;AAAE,eAAO,KAAK,CAAA;OAAE,SAC3B,CAAA;;AAED,aAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;AACzB,aAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;;;AAGxB,UAAI,GAAG,qCACF,MAAM,CAAC,QAAQ,CAAC,EAAG,CAAC,iCACf,CAAC,oCACE,CAAC,QACb,CAAC;AACF,YAAM,CAAC,cAAc,CAAC,GAAG,EACrB,SAAS,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAA;;;AAGrC,aAAO,CAAC,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAA;;;AAG5C,aAAO,CAAC,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAA;KAI/C;;;SAzCe,eAAG;AACjB,aAAO,SAAS,CAAA;KACjB;;;SAHkB,OAAO;;;qBAAP,OAAO","file":"src/symbols.js","sourcesContent":["export default class Symbols {\n  static get title() {\n    return 'Symbols'\n  }\n\n  static examples() {\n    // Symbols are tokens that serves as unique IDs\n    let symbol1 = Symbol()\n    console.log(typeof symbol1)\n    let symbol2 = Symbol('This is the Symbol description')\n    console.log(symbol2.toString())\n    console.log(symbol1 === symbol2)\n\n    // Symbols can be used as property keys\n    const MY_KEY = Symbol()\n    const FOO    = Symbol()\n\n    let obj1 = {\n        [MY_KEY]: 123,\n        [FOO]() { return 'bar' }\n    }\n\n    console.log(obj1[MY_KEY]) // 123\n    console.log(obj1[FOO]())  // bar\n\n    // Enumerating own property keys\n    let obj = {\n        [Symbol('my_key')]: 1,\n        enum: 2,\n        nonEnum: 3\n    };\n    Object.defineProperty(obj,\n        'nonEnum', { enumerable: false })\n\n    // Object.getOwnPropertyNames() ignores symbol-valued property keys:\n    console.log(Object.getOwnPropertyNames(obj)) // ['enum', 'nonEnum']\n\n    // Object.getOwnPropertySymbols() ignores string-valued property keys:\n    console.log(Object.getOwnPropertySymbols(obj)) // [Symbol(my_key)]\n\n    // Reflect.ownKeys() considers all kinds of keys:\n    // Reflect.ownKeys(obj) // [Symbol(my_key), 'enum', 'nonEnum']\n  }\n}\n"]}