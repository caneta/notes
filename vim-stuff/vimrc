set nocompatible
filetype plugin on
" Make % command switch for opening/closed if-else
runtime macros/matchit.vim

set number
set ruler
set hlsearch
set ignorecase
set listchars=tab:▸\ ,eol:¬
set list
set history=200

colorscheme koehler

" Only do this part when compiled with support for autocommands
if has("autocmd")
    " Enable file type detection
    filetype on

    " Syntax of these languages is fussy over tabs Vs spaces
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " Customisations based on house-style (arbitrary)
    autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab

    " Treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml
endif

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set cursorline
set incsearch
set nobackup
set noswapfile

" Disable arrows to move around
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

" Recalling commands from history (grey box at page 69 of Practical Vim by Drew Nail)
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" For pathogen plugin
execute pathogen#infect()
Helptags
syntax on

filetype plugin indent on

" for commentary plugin:
autocmd FileType sql set commentstring=--\ %s

set mouse=nv

nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" Shortcuts for opening file in same directory as current file
cnoremap <expr> %% getcmdtype() == ':' ? escape(expand('%:h'), ' \').'/' : '%%'
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" Fix the & command in normal+visual modes
nnoremap & :&&<Enter>
xnoremap & :&&<Enter>

" The opposite of J:
:nnoremap K i<CR><Esc>

nnoremap <F7> :SyntasticToggleMode<CR>

" Set ctags stuff
set tags+=~/Desktop/vimTags/mw_tags,~/Desktop/vimTags/ui_tags,~/Desktop/vimTags/sources_tags
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
nnoremap <F8> :TagbarToggle<CR>

" Setting working directory and path for custom repo
" cd ~/Desktop/myDir/
" set path+=~/Desktop/myDir/code/**

" Debugging stuff
:nnoremap <leader>db ologger.debug(":::::::::::: START ::::::::::::")
            \<cr>logger.debug()
            \<cr>logger.debug("::::::::::::  END  ::::::::::::")
            \<cr><esc>kkf(a
:nnoremap <leader>dbj oconsole.log(":::::::::::: START ::::::::::::");
            \<cr>console.log();
            \<cr>console.log("::::::::::::	END  ::::::::::::");
            \<cr><esc>kkf(a

"folding settings
set foldmethod=indent	"fold based on indent
set foldnestmax=2		"deepest fold is 2 levels
set nofoldenable		"don't fold by default
"set foldlevel=2

" Using JsHint with Synthastic plugin
let g:syntastic_javascript_checkers = ['jshint']

" Strip trailing whitespaces
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
function <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

